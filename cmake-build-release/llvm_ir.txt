declare i32 @getint()
declare i32 @getchar()
declare void @putint(i32)
declare void @putch(i32)
declare void @putstr(i8*)
@judge_var = dso_local global i1 0
@singleConstDecl= dso_local global i32 0
@singleConstDecl_0= dso_local global i32 0
@singleConstDecl_1= dso_local global i32 0
@singleVarDecl= dso_local global i32 0
@singleVarDecl_0= dso_local global i32 0
@singleVarDecl_1= dso_local global i32 0
@singleVarDecl_2= dso_local global i32 0
define dso_local void @funcDef_void() {
ret void
}

define dso_local i32 @funcDef_0(i32 %0) {
%2= alloca i32
store i32 %0, i32* %2
%3= alloca i32
%4 = load i32, i32* %2
%5 =  mul i32 %4, 10
store i32 %5, i32* %3
%6 = load i32, i32* %3
ret i32 %6
}

define dso_local i32 @funcDef_1(i32 %0,i32 %1) {
%3= alloca i32
store i32 %0, i32* %3
%4= alloca i32
store i32 %1, i32* %4
%5= alloca i32
%6 = load i32, i32* %3
%7 = load i32, i32* %4
%8 =  mul i32 %6, %7
store i32 %8, i32* %5
%9= alloca i32
%10= alloca i32
%11 = load i32, i32* %4
%12 = icmp ne i32 %11, 0
br i1 %12, label %Current0, label %And0
Current0:
store i1 1,i1* @judge_var
br label %AndEnd0
And0:
store i1 0,i1* @judge_var
br label %AndEnd0
AndEnd0:
%13 = load i1, i1* @judge_var
br i1 %13, label %Or0, label %Current1
Current1:
store i1 0,i1* @judge_var
br label %OrEnd0
Or0:
store i1 1,i1* @judge_var
br label %OrEnd0
OrEnd0:
%14 = load i1, i1* @judge_var
br i1 %14, label %then1, label %else1
then1:
%15 = load i32, i32* %5
%16 = load i32, i32* %3
%17 = load i32, i32* %4
%18 =  srem i32 %16, %17
%19 =  add i32 %15, %18
store i32 %19, i32* %9
%20 = load i32, i32* %3
%21 = load i32, i32* %4
%22 =  sdiv i32 %20, %21
store i32 %22, i32* %10
br label %end1
else1:
%23 = load i32, i32* %5
%24 = load i32, i32* %3
%25 =  add i32 %23, %24
store i32 %25, i32* %9
%26 = load i32, i32* %3
%27 =  sdiv i32 %26, 2
store i32 %27, i32* %10
br label %end1
end1:
%28 = load i32, i32* %9
%29 = load i32, i32* %5
%30 =  sub i32 %28, %29
store i32 %30, i32* %9
%31 = load i32, i32* %5
%32 = load i32, i32* %9
%33 =  add i32 %31, %32
%34 = load i32, i32* %5
%35 = icmp slt i32 %34, 0
br i1 %35, label %Current2, label %And1
Current2:
store i1 1,i1* @judge_var
br label %AndEnd1
And1:
store i1 0,i1* @judge_var
br label %AndEnd1
AndEnd1:
%36 = load i1, i1* @judge_var
br i1 %36, label %Or1, label %Current3
Current3:
store i1 0,i1* @judge_var
br label %OrEnd1
Or1:
store i1 1,i1* @judge_var
br label %OrEnd1
OrEnd1:
%37 = load i1, i1* @judge_var
br i1 %37, label %then2, label %else2
then2:
%38 = load i32, i32* %5
%39 =  sub i32 0, %38
store i32 %39, i32* %5
br label %end2
else2:
br label %end2
end2:
%40 = load i32, i32* %5
%41 =  add i32 1, %40
%42 = load i32, i32* %9
%43 = load i32, i32* %10
%44 =  add i32 %42, %43
%45 =  mul i32 %41, %44
ret i32 %45
}

define dso_local void @printInt(i32 %0) {
%2= alloca i32
store i32 %0, i32* %2
%3 = load i32, i32* %2
call void @putch(i32 112)
call void @putch(i32 114)
call void @putch(i32 105)
call void @putch(i32 110)
call void @putch(i32 116)
call void @putch(i32 32)
call void @putch(i32 105)
call void @putch(i32 110)
call void @putch(i32 116)
call void @putch(i32 32)
call void @putch(i32 58)
call void @putch(i32 32)
call void @putint(i32 %3)
call void @putch(i32 10)
ret void
ret void
}

define dso_local i32 @main() {
store i32 23, i32* @singleConstDecl
store i32 13, i32* @singleConstDecl_0
store i32 3, i32* @singleConstDecl_1
%1 =  sub i32 3, 13
store i32 %1, i32* @singleVarDecl
store i32 23, i32* @singleVarDecl_0
%2 =  sub i32 3, 13
%3 =  sub i32 0, %2
store i32 %3, i32* @singleVarDecl_1
call void @putch(i32 49)
call void @putch(i32 57)
call void @putch(i32 51)
call void @putch(i32 55)
call void @putch(i32 51)
call void @putch(i32 52)
call void @putch(i32 55)
call void @putch(i32 57)
call void @putch(i32 10)
%4= alloca i32
store i32 10, i32* %4
%5= alloca i32
%6= alloca i32
%7= alloca i32
%8= alloca i32
%9 = call i32 @getint()
store i32 %9, i32* %5
%10 = call i32 @getint()
store i32 %10, i32* %6
%11 = call i32 @getint()
store i32 %11, i32* %7
%12 = call i32 @getint()
store i32 %12, i32* %8
%13 = load i32, i32* %5
%14 = icmp sgt i32 %13, 5
br i1 %14, label %Current4, label %And2
Current4:
store i1 1,i1* @judge_var
br label %AndEnd2
And2:
store i1 0,i1* @judge_var
br label %AndEnd2
AndEnd2:
%15 = load i1, i1* @judge_var
br i1 %15, label %Or2, label %Current5
Current5:
store i1 0,i1* @judge_var
br label %OrEnd2
Or2:
store i1 1,i1* @judge_var
br label %OrEnd2
OrEnd2:
%16 = load i1, i1* @judge_var
br i1 %16, label %then3, label %else3
then3:
store i32 5, i32* %5
br label %end3
else3:
br label %end3
end3:
br label %for_judge1
for_judge1:
%17 = load i32, i32* %4
%18 = icmp ne i32 %17, 0
br i1 %18, label %Current6, label %And3
Current6:
store i1 1,i1* @judge_var
br label %AndEnd3
And3:
store i1 0,i1* @judge_var
br label %AndEnd3
AndEnd3:
%19 = load i1, i1* @judge_var
br i1 %19, label %Or3, label %Current7
Current7:
store i1 0,i1* @judge_var
br label %OrEnd3
Or3:
store i1 1,i1* @judge_var
br label %OrEnd3
OrEnd3:
%20 = load i1, i1* @judge_var
br i1 %20, label %for_body1, label %for_end1
for_update1:
br label %for_judge1
for_body1:
%21 = load i32, i32* %4
%22 =  sub i32 %21, 1
store i32 %22, i32* %4
%23 = load i32, i32* %6
%24 = load i32, i32* %4
%25 = icmp sge i32 %23, %24
br i1 %25, label %Current8, label %And4
Current8:
store i1 1,i1* @judge_var
br label %AndEnd4
And4:
store i1 0,i1* @judge_var
br label %AndEnd4
AndEnd4:
%26 = load i1, i1* @judge_var
br i1 %26, label %Or4, label %Current9
Current9:
store i1 0,i1* @judge_var
br label %OrEnd4
Or4:
store i1 1,i1* @judge_var
br label %OrEnd4
OrEnd4:
%27 = load i1, i1* @judge_var
br i1 %27, label %then4, label %else4
then4:
%28 = load i32, i32* %6
%29 = load i32, i32* %4
%30 =  add i32 %29, 1
%31 =  sdiv i32 %28, %30
%32 = load i32, i32* %4
%33 =  add i32 %31, %32
store i32 %33, i32* %6
br label %end4
else4:
br label %end4
end4:
%34 = load i32, i32* %7
%35 = load i32, i32* %4
%36 = icmp sle i32 %34, %35
br i1 %36, label %Current10, label %And5
Current10:
store i1 1,i1* @judge_var
br label %AndEnd5
And5:
store i1 0,i1* @judge_var
br label %AndEnd5
AndEnd5:
%37 = load i1, i1* @judge_var
br i1 %37, label %Or5, label %Current11
Current11:
store i1 0,i1* @judge_var
br label %OrEnd5
Or5:
store i1 1,i1* @judge_var
br label %OrEnd5
OrEnd5:
%38 = load i1, i1* @judge_var
br i1 %38, label %then5, label %else5
then5:
%39 = load i32, i32* %7
%40 = load i32, i32* %4
%41 =  mul i32 %39, %40
store i32 %41, i32* %7
br label %end5
else5:
%42 = load i32, i32* %7
%43 = load i32, i32* %4
%44 =  add i32 %43, 3
%45 =  srem i32 %42, %44
store i32 %45, i32* %7
br label %end5
end5:
br label %for_judge2
for_judge2:
%46 = load i32, i32* %8
%47 = load i32, i32* %7
%48 = icmp slt i32 %46, %47
br i1 %48, label %Current12, label %And6
Current12:
store i1 1,i1* @judge_var
br label %AndEnd6
And6:
store i1 0,i1* @judge_var
br label %AndEnd6
AndEnd6:
%49 = load i1, i1* @judge_var
br i1 %49, label %Or6, label %Current13
Current13:
store i1 0,i1* @judge_var
br label %OrEnd6
Or6:
store i1 1,i1* @judge_var
br label %OrEnd6
OrEnd6:
%50 = load i1, i1* @judge_var
br i1 %50, label %for_body2, label %for_end2
for_update2:
br label %for_judge2
for_body2:
%51 = load i32, i32* %8
%52 = load i32, i32* %4
%53 =  add i32 %51, %52
store i32 %53, i32* %8
%54 = load i32, i32* %8
%55 = load i32, i32* %5
%56 = icmp eq i32 %54, %55
br i1 %56, label %Current14, label %And7
Current14:
store i1 1,i1* @judge_var
br label %AndEnd7
And7:
store i1 0,i1* @judge_var
br label %AndEnd7
AndEnd7:
%57 = load i1, i1* @judge_var
br i1 %57, label %Or7, label %Current15
Current15:
store i1 0,i1* @judge_var
br label %OrEnd7
Or7:
store i1 1,i1* @judge_var
br label %OrEnd7
OrEnd7:
%58 = load i1, i1* @judge_var
br i1 %58, label %then6, label %else6
then6:
br label %for_end2
br label %end6
else6:
br label %end6
end6:
%60 = load i32, i32* %8
%61 = load i32, i32* %6
%62 = icmp ne i32 %60, %61
br i1 %62, label %Current16, label %And8
Current16:
store i1 1,i1* @judge_var
br label %AndEnd8
And8:
store i1 0,i1* @judge_var
br label %AndEnd8
AndEnd8:
%63 = load i1, i1* @judge_var
br i1 %63, label %Or8, label %Current17
Current17:
store i1 0,i1* @judge_var
br label %OrEnd8
Or8:
store i1 1,i1* @judge_var
br label %OrEnd8
OrEnd8:
%64 = load i1, i1* @judge_var
br i1 %64, label %then7, label %else7
then7:
%65 = load i32, i32* %6
%66 = load i32, i32* %8
%67 =  add i32 %65, %66
store i32 %67, i32* %8
br label %for_update2
br label %end7
else7:
br label %end7
end7:
br label %for_update2
for_end2:
br label %for_update1
for_end1:
%69 = load i32, i32* %4
%70 =  xor i32 %69, 1
%71 = icmp ne i32 %70, 0
br i1 %71, label %Current18, label %And9
Current18:
store i1 1,i1* @judge_var
br label %AndEnd9
And9:
store i1 0,i1* @judge_var
br label %AndEnd9
AndEnd9:
%72 = load i1, i1* @judge_var
br i1 %72, label %Or9, label %Current19
Current19:
store i1 0,i1* @judge_var
br label %OrEnd9
Or9:
store i1 1,i1* @judge_var
br label %OrEnd9
OrEnd9:
%73 = load i1, i1* @judge_var
br i1 %73, label %then8, label %else8
then8:
%74 = load i32, i32* %4
call void @printInt(i32 %74)
br label %end8
else8:
br label %end8
end8:
%75 = load i32, i32* %5
call void @printInt(i32 %75)
%76 = load i32, i32* %6
call void @printInt(i32 %76)
%77 = load i32, i32* %7
call void @printInt(i32 %77)
%78 = load i32, i32* %8
call void @printInt(i32 %78)
%79= alloca i32
%80 = load i32, i32* %8
%81 = load i32, i32* %7
%82 = call i32 @funcDef_1(i32 %80,i32 %81)
store i32 %82, i32* %79
%83= alloca i32
%84 = load i32, i32* %79
%85 = load i32, i32* %6
%86 = call i32 @funcDef_0(i32 %85)
%87 = call i32 @funcDef_1(i32 %84,i32 %86)
store i32 %87, i32* %83
call void @funcDef_void()
%88 = load i32, i32* %79
call void @printInt(i32 %88)
%89 = load i32, i32* %83
call void @printInt(i32 %89)
%90 = load i32, i32* @singleVarDecl
%91 = load i32, i32* @singleVarDecl_2
%92 = call i32 @funcDef_1(i32 %90,i32 %91)
%93 = load i32, i32* @singleConstDecl_0
%94 = load i32, i32* @singleConstDecl_1
%95 = call i32 @funcDef_1(i32 %93,i32 %94)
%96 = call i32 @funcDef_1(i32 %92,i32 %95)
store i32 %96, i32* @singleVarDecl_2
%97 = load i32, i32* @singleVarDecl_2
call void @printInt(i32 %97)
ret i32 0
}

